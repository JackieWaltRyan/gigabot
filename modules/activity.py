from asyncio import run
from datetime import datetime
from discord import Embed
from discord.ext.commands import Cog
from discord.ext.tasks import loop
from discord.utils import get
from gigabot import logs, LEVELS, save
from traceback import format_exc


class Activity(Cog):
    def __init__(self, bot):
        try:
            self.BOT, self.voice = bot, {}
            self.update_members.start()
            self.update_channels.start()
            self.update_roles.start()
        except Exception:
            run(main=logs(level=LEVELS[4], message=format_exc()))

    def cog_unload(self):
        try:
            self.update_members.cancel()
            self.update_channels.cancel()
            self.update_roles.cancel()
        except Exception:
            run(main=logs(level=LEVELS[4], message=format_exc()))

    @loop(hours=1)
    async def update_members(self):
        try:
            users = {}
            from db.members import members
            for guild in self.BOT.guilds:
                for member in guild.members:
                    if member.id not in members:
                        members.update({member.id: {"–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞": f"{member.name}#{member.discriminator}",
                                                    "–°—Ç–∞—Ç—É—Å": True,
                                                    "–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è": datetime.utcnow(),
                                                    "–ë–æ—Ç": False,
                                                    "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è": [],
                                                    "–î–Ω–∏": (datetime.utcnow() - member.joined_at).days,
                                                    "–°–æ–æ–±—â–µ–Ω–∏—è": 0,
                                                    "–£–ø–æ–º–∏–Ω–∞–Ω–∏—è": 0,
                                                    "–õ–∞–π–∫–∏": 0,
                                                    "–î–∏–∑–ª–∞–π–∫–∏": 0,
                                                    "–í—Ä–µ–º—è –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö": 0,
                                                    "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä": member.joined_at,
                                                    "–†–æ–ª–∏": [],
                                                    "–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏": {"–°—ã–≥—Ä–∞–Ω–æ": 0, "–ü–æ–±–µ–¥": 0, "–ü–æ—Ä–∞–∂–µ–Ω–∏–π": 0,
                                                                        "–ü—Ä–æ—Ü–µ–Ω—Ç": 0},
                                                    "–¢–µ—Ç—Ä–∏—Å": {"–°—ã–≥—Ä–∞–Ω–æ": 0, "–õ—É—á—à–∏–π —Å—á–µ—Ç": 0}}})
                        if member.bot:
                            members[member.id]["–ë–æ—Ç"] = True
                    else:
                        members[member.id].update({"–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞": f"{member.name}#{member.discriminator}",
                                                   "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä": member.joined_at})
                        if member.bot:
                            members[member.id]["–ë–æ—Ç"] = True
                        voices = members[member.id]["–í—Ä–µ–º—è –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö"]
                        if members[member.id]["–°–æ–æ–±—â–µ–Ω–∏—è"] >= 100 or voices >= 300 * 60:
                            if get(iterable=guild.roles, id=989814115214168125) not in member.roles:
                                await member.add_roles(get(iterable=guild.roles, id=989814115214168125))
                                await member.send(embed=Embed(title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!", color=0xFFA500).add_field(
                                    name="–í—ã–¥–∞—á–∞ —Ä–æ–ª–∏!", value=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å "
                                                               f"{get(iterable=guild.roles, id=989814115214168125)}"))
                        if members[member.id]["–°–æ–æ–±—â–µ–Ω–∏—è"] >= 200 or voices >= 600 * 60:
                            if get(iterable=guild.roles, id=989815195155185704) not in member.roles:
                                await member.add_roles(get(iterable=guild.roles, id=989815195155185704))
                                await member.send(embed=Embed(title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!", color=0xFFA500).add_field(
                                    name="–í—ã–¥–∞—á–∞ —Ä–æ–ª–∏!", value=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å "
                                                               f"{get(iterable=guild.roles, id=989815195155185704)}"))
                        if members[member.id]["–°–æ–æ–±—â–µ–Ω–∏—è"] < 100 and voices < 300 * 60:
                            if get(iterable=member.guild.roles, id=989814115214168125) in member.roles:
                                await member.remove_roles(get(iterable=member.guild.roles, id=989814115214168125))
                        if members[member.id]["–°–æ–æ–±—â–µ–Ω–∏—è"] < 200 and voices < 600 * 60:
                            if get(iterable=member.guild.roles, id=989815195155185704) in member.roles:
                                await member.remove_roles(get(iterable=member.guild.roles, id=989815195155185704))
                for channel in guild.channels:
                    if str(channel.type) == "text":
                        async for message in channel.history(limit=1000000000):
                            if message.author.id in members:
                                if message.author not in users:
                                    users.update({message.author: {"–°–æ–æ–±—â–µ–Ω–∏–π": 1, "–£–ø–æ–º–∏–Ω–∞–Ω–∏–π": 0,
                                                                   "–î–∞—Ç–∞": message.created_at}})
                                else:
                                    users[message.author]["–°–æ–æ–±—â–µ–Ω–∏–π"] += 1
                                if message.created_at < users[message.author]["–î–∞—Ç–∞"]:
                                    users[message.author]["–î–∞—Ç–∞"] = message.created_at
                                if len(message.mentions) > 0:
                                    for member in message.mentions:
                                        if message.author.id in members:
                                            if member not in users:
                                                users.update({member: {"–°–æ–æ–±—â–µ–Ω–∏–π": 0, "–£–ø–æ–º–∏–Ω–∞–Ω–∏–π": 1,
                                                                       "–î–∞—Ç–∞": message.created_at}})
                                            else:
                                                users[member]["–£–ø–æ–º–∏–Ω–∞–Ω–∏–π"] += 1
                                            if message.created_at < users[member]["–î–∞—Ç–∞"]:
                                                users[member]["–î–∞—Ç–∞"] = message.created_at
            for member in users:
                try:
                    try:
                        if member.joined_at < users[member]["–î–∞—Ç–∞"]:
                            users[member]["–î–∞—Ç–∞"] = member.joined_at
                    except Exception:
                        users[member]["–î–∞—Ç–∞"] = member.joined_at
                except Exception:
                    pass
                members[member.id].update({"–î–Ω–∏": (datetime.utcnow() - users[member]["–î–∞—Ç–∞"]).days,
                                           "–°–æ–æ–±—â–µ–Ω–∏—è": users[member]["–°–æ–æ–±—â–µ–Ω–∏–π"],
                                           "–£–ø–æ–º–∏–Ω–∞–Ω–∏—è": users[member]["–£–ø–æ–º–∏–Ω–∞–Ω–∏–π"],
                                           "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä": users[member]["–î–∞—Ç–∞"]})
                if member.bot:
                    members[member.id]["–ë–æ—Ç"] = True
            await save(file="members", content=members)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    @loop(hours=1)
    async def update_channels(self):
        try:
            from db.channels import channels
            for guild in self.BOT.guilds:
                for channel in guild.channels:
                    channels.update({channel.id: {"–ù–∞–∑–≤–∞–Ω–∏–µ": channel.name, "–¢–∏–ø": str(channel.type),
                                                  "–ü–æ–∑–∏—Ü–∏—è": channel.position}})
            await save(file="channels", content=channels)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    @loop(hours=1)
    async def update_roles(self):
        try:
            from db.roles import roles
            for guild in self.BOT.guilds:
                for role in guild.roles:
                    roles.update({role.id: {"–ù–∞–∑–≤–∞–Ω–∏–µ": role.name, "–¶–≤–µ—Ç": role.color.value, "–ü–æ–∑–∏—Ü–∏—è": role.position}})
            await save(file="roles", content=roles)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    @Cog.listener()
    async def on_message(self, message):
        try:
            from db.members import members
            if message.author.id in members:
                members[message.author.id]["–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"] = message.created_at
                await save(file="members", content=members)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    @Cog.listener()
    async def on_reaction_add(self, reaction, user):
        try:
            if str(reaction) == "üëç":
                from db.members import members
                members[user.id]["–õ–∞–π–∫–∏"] += 1
                await save(file="members", content=members)
            if str(reaction) == "üëé":
                from db.members import members
                members[user.id]["–î–∏–∑–ª–∞–π–∫–∏"] += 1
                await save(file="members", content=members)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    @Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        try:
            if member.id != self.BOT.user.id:
                if before.channel is None and after.channel is not None:
                    self.voice.update({member: datetime.now()})
                if after.channel is None and before.channel is not None:
                    if self.voice.get(member) is not None:
                        delta = datetime.now() - self.voice[member]
                        from db.members import members
                        members[member.id]["–í—Ä–µ–º—è –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö"] += int(delta.seconds)
                        await save(file="members", content=members)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())


def setup(bot):
    try:
        bot.add_cog(cog=Activity(bot=bot))
    except Exception:
        run(main=logs(level=LEVELS[4], message=format_exc()))
