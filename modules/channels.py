from asyncio import run
from datetime import datetime, timedelta
from discord import Embed, PermissionOverwrite
from discord.ext.commands import command, has_permissions, Cog
from discord.ext.tasks import loop
from discord.utils import get
from gigabot import logs, LEVELS, FOOTER, save
from re import findall
from traceback import format_exc


class Channels(Cog):
    def __init__(self, bot):
        try:
            self.BOT = bot
            self.channels.start()
        except Exception:
            run(main=logs(level=LEVELS[4], message=format_exc()))

    def cog_unload(self):
        try:
            self.channels.cancel()
        except Exception:
            run(main=logs(level=LEVELS[4], message=format_exc()))

    @loop(hours=1)
    async def channels(self):
        try:
            from db.channels import channels
            for channel_id in channels:
                if channels[channel_id]["–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"]:
                    delta = None
                    if "–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è" in channels[channel_id]:
                        delta = datetime.utcnow() - channels[channel_id]["–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"]
                    if "–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è" in channels[channel_id]:
                        delta = datetime.utcnow() - channels[channel_id]["–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"]
                    timer = timedelta(hours=channels[channel_id]["–¢–∞–π–º–µ—Ä"]) - delta
                    if "-1" in str(timer):
                        try:
                            channel = await self.BOT.get_channel(id=channel_id)
                            await channel.delete()
                        except Exception:
                            await logs(level=LEVELS[1], message=format_exc())
                        channels[channel_id]["–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"] = False
                        await save(file="channels", content=channels)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    @Cog.listener()
    async def on_message(self, message):
        try:
            from db.channels import channels
            if "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ" in channels[message.channel.id]:
                if channels[message.channel.id]["–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"]:
                    channels[message.channel.id]["–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"] = message.created_at
                    await save(file="channels", content=channels)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    @Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        try:
            from db.channels import channels
            try:
                if "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ" in channels[after.channel.id]:
                    if channels[after.channel.id]["–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"]:
                        channels[after.channel.id]["–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"] = datetime.utcnow()
                        await save(file="channels", content=channels)
                if "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ" in channels[before.channel.id]:
                    if channels[before.channel.id]["–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"]:
                        channels[before.channel.id]["–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"] = datetime.utcnow()
                        await save(file="channels", content=channels)
            except Exception:
                await logs(level=LEVELS[1], message=format_exc())
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    # –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    @command(description="–í—Å–µ 2", name="text", help="–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª", brief="–ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ",
             usage="!text")
    async def command_text(self, ctx):
        try:
            if str(ctx.channel.type) == "text":
                await ctx.message.delete(delay=1)
                overwrites = {ctx.message.guild.default_role: PermissionOverwrite(view_channel=False),
                              ctx.message.guild.get_member(user_id=ctx.author.id):
                                  PermissionOverwrite(add_reactions=True, attach_files=True, create_instant_invite=True,
                                                      embed_links=True, manage_channels=True, manage_messages=True,
                                                      manage_roles=True, manage_webhooks=True, mention_everyone=True,
                                                      read_message_history=True, send_messages=True,
                                                      send_tts_messages=True, use_external_emojis=True,
                                                      use_slash_commands=True, view_channel=True)}
                await ctx.message.guild.create_text_channel(name=f"ü¶Ñ{ctx.author.name.lower()}", overwrites=overwrites,
                                                            category=get(iterable=ctx.message.guild.categories,
                                                                         id=1007577247894482974))
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    @command(description="–í—Å–µ 2", name="voice", help="–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª", brief="–ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ",
             usage="!voice")
    async def command_voice(self, ctx):
        try:
            if str(ctx.channel.type) == "text":
                await ctx.message.delete(delay=1)
                overwrites = {ctx.message.guild.default_role: PermissionOverwrite(connect=False, view_channel=False),
                              ctx.message.guild.get_member(user_id=ctx.author.id):
                                  PermissionOverwrite(connect=True, create_instant_invite=True, deafen_members=True,
                                                      manage_channels=True, manage_roles=True, move_members=True,
                                                      mute_members=True, priority_speaker=True, speak=True, stream=True,
                                                      use_voice_activation=True, view_channel=True)}
                await ctx.message.guild.create_voice_channel(name=f"ü¶Ñ{ctx.author.name.lower()}", overwrites=overwrites,
                                                             category=get(iterable=ctx.message.guild.categories,
                                                                          id=1007577247894482974))
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    # –∫–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    @command(description="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã 1", name="channels", help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–æ–≤",
             brief="–ù–∏—á–µ–≥–æ / `–ü–∞—Ä–∞–º–µ—Ç—Ä` `–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ ID` `–í—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö`",
             usage="!channel add <#974755169311002636> 24")
    @has_permissions(manage_channels=True)
    async def command_channels(self, ctx, trigger: str = None, name: str = None, time: int = 24):
        try:
            if str(ctx.channel.type) == "text":
                await ctx.message.delete(delay=1)
                embed, i, ii, iii = None, 0, 0, 1
                from db.channels import channels
                if trigger is None and name is None and time == 24:
                    embeds = [[Embed(title="–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:", color=ctx.author.color)]]
                    embeds[i].add_field(name="–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", inline=False,
                                        value="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª: **!channels add `—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ ID` `–≤—Ä–µ–º—è –≤ "
                                              "—á–∞—Å–∞—Ö`**\n"
                                              "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª: **!channels del `—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ ID` `–≤—Ä–µ–º—è –≤ "
                                              "—á–∞—Å–∞—Ö`**\n"
                                              "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è: **!channels time `—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ ID` `–≤—Ä–µ–º—è –≤ "
                                              "—á–∞—Å–∞—Ö`**")
                    for channel in channels:
                        if "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ" in channels[channel]:
                            if channels[channel]["–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"]:
                                if ii < 25:
                                    delta = None
                                    if "–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è" in channels[channel]:
                                        delta = datetime.utcnow() - channels[channel]["–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"]
                                    if "–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è" in channels[channel]:
                                        delta = datetime.utcnow() - channels[channel]["–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"]
                                    timer = timedelta(hours=channels[channel]["–¢–∞–π–º–µ—Ä"]) - delta
                                    string = str(timer).split(sep=".")[0].replace("days", "–¥–Ω–µ–π").replace("day", "–¥–µ–Ω—å")
                                    embeds[i].add_field(name=f"–ö–∞–Ω–∞–ª {iii}:", inline=False,
                                                        value=f"ID: {channel}\n"
                                                              f"–ù–∞–∑–≤–∞–Ω–∏–µ: <#{channel}>\n"
                                                              f"–¢–∞–π–º–µ—Ä: {channels[channel]['–¢–∞–π–º–µ—Ä']} —á–∞—Å–∞\n"
                                                              f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {string}")
                                    ii += 1
                                    iii += 1
                                else:
                                    embeds.append([Embed(title="–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:",
                                                         color=ctx.author.color)])
                                    i += 1
                                    ii = 0
                    if iii == 1:
                        embeds[i].add_field(name="–û—à–∏–±–∫–∞:", value="–°–µ–π—á–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤!", inline=False)
                if trigger is not None:
                    channel_id = int(findall(r"(\d+)", name)[0])
                    if trigger == "add":
                        if name is not None:
                            channel = await self.BOT.get_channel(id=channel_id)
                            if str(channel.type) == "text":
                                channels[channel_id].update({"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ": True,
                                                             "–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è": datetime.utcnow(),
                                                             "–¢–∞–π–º–µ—Ä": int(time)})
                            elif str(channel.type) == "voice":
                                channels[channel_id].update({"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ": True,
                                                             "–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è": datetime.utcnow(),
                                                             "–¢–∞–π–º–µ—Ä": int(time)})
                            else:
                                raise Exception("The channel type is not supported.")
                            await save(file="channels", content=channels)
                            embed = Embed(title="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:", color=ctx.author.color)
                            embed.add_field(name="–£—Å–ø–µ—à–Ω–æ:",
                                            value=f"–ï—Å–ª–∏ –≤ –∫–∞–Ω–∞–ª–µ <#{channel_id}> –Ω–µ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∞ {time} —á–∞—Å–∞, –∫–∞–Ω–∞–ª "
                                                  f"–±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω!")
                    if trigger == "del":
                        if name is not None:
                            channels[channel_id]["–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"] = False
                            await save(file="channels", content=channels)
                            embed = Embed(title="–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:", color=ctx.author.color)
                            embed.add_field(name="–£—Å–ø–µ—à–Ω–æ:",
                                            value=f"–ö–∞–Ω–∞–ª <#{channel_id}> —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤!")
                    if trigger == "time":
                        if name is not None:
                            channels[channel_id]["–¢–∞–π–º–µ—Ä"] = int(time)
                            await save(file="channels", content=channels)
                            embed = Embed(title="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏:", color=ctx.author.color)
                            embed.add_field(name="–£—Å–ø–µ—à–Ω–æ:",
                                            value=f"–î–ª—è –∫–∞–Ω–∞–ª–∞ <#{channel_id}> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ {time} —á–∞—Å–∞!")
                embed.set_footer(text=FOOTER["–¢–µ–∫—Å—Ç"], icon_url=FOOTER["–°—Å—ã–ª–∫–∞"])
                await ctx.send(embed=embed, delete_after=60)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())


def setup(bot):
    try:
        bot.add_cog(cog=Channels(bot=bot))
    except Exception:
        run(main=logs(level=LEVELS[4], message=format_exc()))
